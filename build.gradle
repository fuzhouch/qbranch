// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root
// for full license information.

buildscript {
    ext.kotlin_version = '1.0.6'
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.6'
    }
}

subprojects {
    apply plugin: 'kotlin'
    group = 'net.dummydigit.qbranch'
    version = '0.1-SNAPSHOT'
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'org.jetbrains.kotlin:kotlin-stdlib:1.0.6'
        // In most cases, Java reflection is good enough. Leave
        // kotlin-reflect here just in case sometimes we may need it in
        // the future.
        // compile 'org.jetbrains.kotlin:kotlin-reflect:1.0.6'
        testCompile 'junit:junit:4.12'
    }

    test {
        testLogging.showStandardStreams = project.hasProperty("testOutput")? true : false
    }

    jar {
        manifest {
            attributes("Implementation-Title": "Gradle")
            attributes("Implementation-Version": version)
        }
    }

    compileTestJava {
        options.compilerArgs += [ "-Xlint:unchecked" ]
    }
}

// TODO We still hold a dependency to Microsoft Bond
// source code base to get gbc executable and idl definitions.
// We will do the following:
// 1. Add Microsoft Bond as a submodule to get IDL definition, and
// 2. Finally remove dependency to gbc.exe when adding our own
//    compiler
def gbcExePath = project.hasProperty("bondCompilerPath")? \
                 bondCompilerPath : \
                 "${projectDir}/../ktbond/build/compiler/build/gbc/gbc"
println "BondCompilerPath=${gbcExePath}"

def bondIdlPath = project.hasProperty("bondIdlPath")? \
                  bondIdlPath : \
                  "${projectDir}/../ktbond/idl/bond"
println "BondIdlPath=${bondIdlPath}"
project.ext.set("gbcExePath", gbcExePath)
project.ext.set("bondIdlPath", bondIdlPath)

